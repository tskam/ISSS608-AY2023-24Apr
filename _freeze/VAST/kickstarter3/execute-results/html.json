{
  "hash": "5fffa1e54e5caacba3ebedf4465543d1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Kickstarter 3: Working with Geographical Data\"\nformat: html\ndate: \"May 24, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n## Overview\n\nThis kickstarter aims to provide you hands-on guide on how to work with geographical data. By the end of this hands-on exercise, you will be able to use appropriate functions of R packages to perform the following tasks:\n\n-   Importing geographical data in geojson file format into R,\n-   Importing geographical data in ESRI shapefile format into R, and\n-   Visualising sf tibble data.\n\n## Getting Started\n\nFor the purpose of this exercise, two R packages will be used. They are tidyverse and sf package.\n\nIn the code chunk below, `p_load()` of **pacman** package is used to load the R packages into R environemnt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tidyverse)\n```\n:::\n\n\n## Importing Geographical Data in geojson format\n\nIn this section, you will learn how to import a *Oceanus Geography.geojson* provided for VAST Challenge 2024 MC2 into R by using **sf** package. **GeoJSON** is an open standard format designed for representing simple geographical features, along with their non-spatial attributes. It is based on the **JSON** format.  To learn more about the data structure of geojson, you can refer to this [wiki](https://en.wikipedia.org/wiki/GeoJSON) page.        \n\nIn the code chunk below, `st_read()` of **sf** package is used to import a geographical file in [geojson](https://en.wikipedia.org/wiki/GeoJSON) format into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusGeography = st_read(\"data/OceanusGeography.geojson\") %>%\n  st_transform(crs = 4326)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `OceanusGeography' from data source \n  `D:\\tskam\\ISSS608-AY2023-24Apr\\VAST\\data\\OceanusGeography.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 29 features and 7 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n::: {.callout-node}\nThing to learn from the code chunk above:\n\n-   `st_transform()` is used to assign wgs84 (i.e. 4326) coordinates system to the output object.\n:::\n\nThe output R object (i.e.OceanusGeography) is an sf data.frame as shown below.  Actually sf stand for simple feature.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(OceanusGeography)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\nNext, `glimpse()` is used to display the structure of *OceanusGeography* sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(OceanusGeography)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 29\nColumns: 8\n$ Name                 <chr> \"Suna Island\", \"Thalassa Retreat\", \"Makara Shoal\"…\n$ Description          <chr> \"Large island of Oceanus\", \"Smaller island of Oce…\n$ X.note               <chr> \"Suna is 'sand' or 'gritty' in Japanese\", \"Thalas…\n$ type                 <chr> \"Entity.Location.Region\", \"Entity.Location.Region…\n$ X.Kind               <chr> \"Island\", \"Island\", \"Island\", \"Island\", \"Fishing …\n$ Activities           <list> \"Residential\", \"Residential\", \"Recreation\", <\"To…\n$ fish_species_present <list> <>, <>, <>, <>, <\"Cod/Gadus n.specificatae\", \"Bi…\n$ geometry             <GEOMETRY [°]> MULTIPOLYGON (((-166.0111 3..., MULTIPOL…\n```\n\n\n:::\n:::\n\n\n::: {.callout-note}\nThe geometry column indicate the simple feature geometry is multipolygon.  However, if you examine the data.frame closely, you will notice that the geographical data are capture in polygon and point features.\n:::\n\n### Visualising Geographical Data with ggplot2\n\nIt is always a good practice to visualise the sf data.frame in a map.  \n\nIn the code chunk below, [`geom_sf()`](https://ggplot2.tidyverse.org/reference/ggsf.html) of **ggplot2** package is used to plot the sf data.frame in R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = OceanusGeography) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](kickstarter3_files/figure-html/unnamed-chunk-5-1.png){width=1152}\n:::\n:::\n\n\nBefore we move on to next section, let's save OceanusGeography into rds format for future use by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(OceanusGeography, \"data/rds/OceanusGeography.rds\")\n```\n:::\n\n\n## Importing Geographical Data in ESRI shapefile format\n\nIn the code chunk below, `st_read()` of **sf** package is used to import a geographical file in [ESRI shapefile](https://en.wikipedia.org/wiki/Shapefile) format into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations <- st_read(dsn = \"data/shp\",\n  layer = \"Oceanus Geography\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Oceanus Geography' from data source \n  `D:\\tskam\\ISSS608-AY2023-24Apr\\VAST\\data\\shp' using driver `ESRI Shapefile'\nSimple feature collection with 27 features and 7 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -167.0654 ymin: 38.07452 xmax: -163.2723 ymax: 40.67775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nNext `class()` is used verify if the *OceanusLocations* is indeed in sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(OceanusLocations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n:::\n\n\nSimilarly, `glimpse()` is used to reveal the structure of *OceanusLocation* data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(OceanusLocations)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 27\nColumns: 8\n$ Name       <chr> \"Haacklee\", \"Port Grove\", \"Lomark\", \"Himark\", \"Paackland\", …\n$ Descriptio <chr> NA, NA, NA, NA, NA, \"Adimistrative seat of Oceanus\", NA, NA…\n$ X.note     <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ Activities <chr> \"Tourism,Local shipping\", \"Tourism,Research\", \"Deep sea fis…\n$ type       <chr> \"Entity.Location.City\", \"Entity.Location.City\", \"Entity.Loc…\n$ X.Kind     <chr> \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"city\", \"bu…\n$ fish_speci <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ geometry   <POINT [°]> POINT (-165.6908 39.03215), POINT (-165.8855 39.10005…\n```\n\n\n:::\n:::\n\n\nSimilarly, we will visualise the geographical data by using `geom_sf()` of ggplot2 as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = OceanusLocations) +\n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](kickstarter3_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nLikewise, before we moving on to the next section, the code chunk below is used to save *OceanusLocations* into an rds file format.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(OceanusLocations, \n  \"data/rds/OceanusLocations.rds\")\n```\n:::\n\n\n## Importing Edges Data\n\nNow it is time to bring mc2_edges.rds into R.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- read_rds(\"data/rds/mc2_edges.rds\")\n```\n:::\n\n\nNext, `unique()` is used list the unique classes in *event3* column of *mc2_edges* data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(mc2_edges$event3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"TransponderPing\" NA               \n```\n\n\n:::\n:::\n\n\nThe output above shows that there are two unique classes in the event3.  They are: *TransponderPing* and NA.\n\nThe code chunk below is used to extract vessel movement data from mc2_edges.\n\n::: {.callout-note}\nThings to learn from the code chunk below:\n\n-   `filter()` is used to select records with event3 is TransponderPing, and \n-   `select()` is used to fields that are needed to be saved\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- mc2_edges %>%\n  filter(event3 == \"TransponderPing\") %>%\n  select(time, dwell, source, target)\n```\n:::\n\n\nNext, `unique()` is used to list unique classes in source field.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(vessel_movement_data$source)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"City of Haacklee\"        \"City of Lomark\"         \n [3] \"City of Himark\"          \"City of Paackland\"      \n [5] \"City of South Paackland\" \"City of Port Grove\"     \n [7] \"Exit West\"               \"Nav 3\"                  \n [9] \"Nav D\"                   \"Nav B\"                  \n[11] \"Nav A\"                   \"Nav C\"                  \n[13] \"Nav 2\"                   \"Nav 1\"                  \n[15] \"Exit East\"               \"Exit South\"             \n[17] \"Exit North\"              \"Nav E\"                  \n[19] \"Cod Table\"               \"Ghoti Preserve\"         \n[21] \"Wrasse Beds\"             \"Nemo Reef\"              \n[23] \"Don Limpet Preserve\"     \"Tuna Shelf\"             \n```\n\n\n:::\n:::\n\n\nas well as OceanusLocation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(OceanusLocations$Name)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Haacklee\"            \"Port Grove\"          \"Lomark\"             \n [4] \"Himark\"              \"Paackland\"           \"Centralia\"          \n [7] \"South Paackland\"     \"Exit West\"           \"Nav 3\"              \n[10] \"Nav D\"               \"Nav B\"               \"Nav A\"              \n[13] \"Nav C\"               \"Nav 2\"               \"Nav 1\"              \n[16] \"Exit East\"           \"Exit South\"          \"Exit North\"         \n[19] \"Nav E\"               \"Don Limpet Preserve\" \"Tuna Shelf\"         \n[22] \"Makara Shoal\"        \"Silent Sanctuary\"    \"Cod Table\"          \n[25] \"Ghoti Preserve\"      \"Wrasse Beds\"         \"Nemo Reef\"          \n```\n\n\n:::\n:::\n\n\nBecause later we are going to append the coordinates values from *OceanusLocations* to *vessel_movement_data*, it is every important for us to ensure that the class values in *source* field of *vessel_movement_data* is similar to *Name* field of *OceanusLocations*.\n\nIn the code chunk below, `gsub()` is used to remove **City of** from `source` column.  At the same time, `gsub()` is used to exclude the extra white space in from of the words.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- vessel_movement_data%>%\n  mutate(source = gsub(\"^City of\", \"\", source)) %>%\n  mutate(source = gsub(\"^\\\\s+\", \"\", source))\n```\n:::\n\n\nNotice that the words **City of** have been remove from all records in *source* field as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(vessel_movement_data$source)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Haacklee\"            \"Lomark\"              \"Himark\"             \n [4] \"Paackland\"           \"South Paackland\"     \"Port Grove\"         \n [7] \"Exit West\"           \"Nav 3\"               \"Nav D\"              \n[10] \"Nav B\"               \"Nav A\"               \"Nav C\"              \n[13] \"Nav 2\"               \"Nav 1\"               \"Exit East\"          \n[16] \"Exit South\"          \"Exit North\"          \"Nav E\"              \n[19] \"Cod Table\"           \"Ghoti Preserve\"      \"Wrasse Beds\"        \n[22] \"Nemo Reef\"           \"Don Limpet Preserve\" \"Tuna Shelf\"         \n```\n\n\n:::\n:::\n\n\n## Further Data Wrangling\n\nIn the code chunk below, `st_coordinate()` of **sf** package is used to extract coordinates from OceanusLocations sf data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(OceanusLocations)\n```\n:::\n\n\nNext, code chunk below is used to drop the *geometry* column of *OceanusLocations* of sf data.frame by using `st_drop_geometry()` of **sf** package and save the output into a new data.frame called *OceanusLocations_df*.    \n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations_df <- OceanusLocations %>%\n  st_drop_geometry()\n```\n:::\n\n\nThen, the code chunk below is to append the x- and y-coodinate values from *coords* list into the *XCOORD* and *YCOORD* columns of *OceanusLocations_df* respectively.   \n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations_df$XCOORD <- coords[, \"X\"]\nOceanusLocations_df$YCOORD <- coords[, \"Y\"]\n```\n:::\n\n\nIn the code chunk below, `class()` is used to confirm that the output is indded a data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(OceanusLocations_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\nLastly, the code chunk below is used to tidy OceanusLocations_df by selecting the necessary columns only and at the same time, rename *X.Kind* to *Loc_Type*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOceanusLocations_df <- OceanusLocations_df %>%\n  select(Name, X.Kind, XCOORD, YCOORD) %>%\n  rename(Loc_Type = X.Kind)\n```\n:::\n\n\nIn the code chunk below, `left_join()` of **dplyr** package is used to append columns in *OceanusLocations_df* data.frame to *vessel_movement_data* data.frame by using *source* and *Name* of *OceanusLocations_df* and *vessel_movement_data* data.frames respectively.     \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_data <- vessel_movement_data %>%\n  left_join(OceanusLocations_df,\n            by = c(\"source\" = \"Name\"))\n```\n:::\n\n\nBefore moving on to the next section, remember to save *vessel_movement_data* data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(vessel_movement_data, \"data/rds/vessel_movement_data.rds\")\n```\n:::\n\n\n## Creating Vessel Trajectory Data\n\nIn this section, you will learn how to convert the vessel movement data into vessel trajectory data.  A trajectory is a sequence of observations in time and space, for examples, the path formed by fishing vessels. \n\nIn the code chunk below, `st_as_sf()` of **sf** package is used to convert *vessel_movement_data* data.frame into sf point data.frame by using values in XCOORD and YCOORD columns.  The output is an sf data.frame called *vessel_movement_sf*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_data %>%\n  st_as_sf(coords = c(\"XCOORD\", \"YCOORD\"), \n           crs = 4326)\n```\n:::\n\n\nNext `arrange()` is used to sort the records according to the vessels' name (i.e. target) and navigation time (i.e. time) \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_movement_sf <- vessel_movement_sf %>%\n  arrange(target, time)\n```\n:::\n\n\nLastly, `st_cast()` of **sf** package is used to convert\n*vessel_movement_sf* from point features into linestring features called *vessel_trajectory*. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory <- vessel_movement_sf %>%\n  group_by(target) %>%\n  summarize(do_union = FALSE) %>%\n  st_cast(\"LINESTRING\")\n```\n:::\n\n\n## Visualising the Geo-Temporal Patterns of the Vessels\n\nIn this section, you will learn how to visualise the geo-temporal patterns of the vessels by using the newly created vessel trajectory data.\n\nAssuming that we are interested to visualise the geo-temporal of vessel *albacoreangler47d*.  The code chunk below is used to select the appropriate data records. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nvessel_trajectory_selected <- vessel_trajectory %>%\n  filter(target == \"albacoreangler47d\")\n```\n:::\n\n\nNext, appropriate functions of ggplot2 is used to plot the selected vessel trajectories by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data = OceanusGeography) +\n  geom_sf(data = vessel_trajectory_selected, \n          aes(color = factor(target)), \n          size = 1) +\n  theme_minimal() +\n  labs(title = \"Trajectories of albacoreangler47d\", \n  x = \"Longitude\", y = \"Latitude\", color = \"ID\")\n```\n\n::: {.cell-output-display}\n![](kickstarter3_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "kickstarter3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}