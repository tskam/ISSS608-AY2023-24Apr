{
  "hash": "0529e71272ab0bd64f504b21902e8d1f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Kickstarter 2: Working with Graph Data\"\nformat: html\ndate: \"May 24, 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n## Overview\n\nThis kickstarter aims to provide you hands-on guide on how to work with graph data.  By the end of this hands-on exercise, you will be able to use appropriate R functions to perform the following tasks:\n\n-   Importing graph data in json file format into R\n-   Extracting the nodes and edges (also known as links) from imported graph data.\n-   Wrangling text data type.\n\n## Getting Started\n\nFor the purpose of this exercise, three R packages will be used.  They are tidyverse, jsonlite and SmartEDA.  \n\n::: {.callout-note}\nYou are required to install the R packages above, if necessary, before continue to the next step.  \n:::\n\nIn the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite)\n```\n:::\n\n\n## Importing Graph Data\n\nFor the purpose of this exercise, *mc2.json* file will be used. Before getting started, you should have the data set in the *data* sub-folder.\n\n::: {.callout-warning}\nThis is a very large data set.  Please ensure that you have added a line `data/` in the *.gitignore* file.\n:::\n\nIn the code chunk below, fromJSON() of jsonlite package is used to import mc2.json file into R and save the output object \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_data <- fromJSON(\"data/mc2.json\")\n```\n:::\n\n\nThe output is called *mc2_data*. It is a large list R object.\n\n## Wrangling and tidying edges\n\nIn this section, you will learn how to extract and wrangle the edges object.\n\n### Extracting edges\n\nThe code chunk below will be used to extract the *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- as_tibble(mc2_data$links) %>% \n  distinct() \n```\n:::\n\n\nNext, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <chr> \"2035-09-16T04:06:48.185987\", \"2035-09-20T05:21:33…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_last_edited_date` <chr> \"2035-09-16T00:59:46.300100\", \"2035-09-22T02:37:37…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n::: callout-note\nFrom the table above, the following data issues can be identified:\n\n-   Columns with date data type are not in the correct format.\n-   some field names start with \"_\" need to be rename in order to avoid unnecessary coding issue in the later part of the tasks.\n:::\n\n### Correcting date data type\n\nIn the code chunk below, `as_datetime()` of **lubridate** package is used to convert fields with character date into **POSIXt** format. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges$time <- as_datetime(mc2_edges$time)\nmc2_edges$\"_last_edited_date\" <- as_datetime(mc2_edges$\"_last_edited_date\")\nmc2_edges$\"_date_added\" <- as_datetime(mc2_edges$\"_date_added\")\nmc2_edges$\"date\" <- as_datetime(\"mc2_edges$date\")\n```\n:::\n\n\nNext, glimpse() will be used to confirm if the process have been performed correctly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 271,643\nColumns: 17\n$ type                <chr> \"Event.TransportEvent.TransponderPing\", \"Event.Tra…\n$ time                <dttm> 2035-09-16 04:06:48, 2035-09-20 05:21:33, 2035-09…\n$ dwell               <dbl> 115074.79, 412706.32, 286092.88, 327623.95, 243225…\n$ `_last_edited_by`   <chr> \"Olokun Daramola\", \"Melinda Manning\", \"Olokun Dara…\n$ `_date_added`       <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-09…\n$ `_last_edited_date` <dttm> 2035-09-16 00:59:46, 2035-09-22 02:37:37, 2035-10…\n$ `_raw_source`       <chr> \"Oceanus Vessel Locator System\", \"Oceanus Vessel L…\n$ `_algorithm`        <chr> \"OVLS-Catch&Hook\", \"OVLS-Catch&Hook\", \"OVLS-Catch&…\n$ source              <chr> \"City of Haacklee\", \"City of Haacklee\", \"City of H…\n$ target              <chr> \"perchplundererbc0\", \"perchplundererbc0\", \"perchpl…\n$ key                 <int> 0, 1, 2, 3, 4, 5, 6, 7, 8, 0, 1, 2, 3, 4, 5, 6, 7,…\n$ date                <dttm> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ data_author         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ aphorism            <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ holiday_greeting    <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ wisdom              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ `saying of the sea` <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n```\n\n\n:::\n:::\n\n\n### Changing field name\n\nIn the code chunk below, `rename()` of **dplyr** package is used to change the following fields.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  rename(\"last_edited_by\" = \"_last_edited_by\",\n         \"date_added\" = \"_date_added\",\n         \"last_edited_date\" = \"_last_edited_date\",\n         \"raw_source\" = \"_raw_source\",\n         \"algorithm\" = \"_algorithm\") \n```\n:::\n\n\n### Splitting words\n\nFrom the screenshot below, we can see that the text in *type* field are not in a tidy manner. \n\n![](images/image1.jpg)\n\nWe are going to tidy the type column by creating two columns as shown below.\n\n![](images/image2.jpg)\n\nThe steps below will be used to split text in type column into two columns: namely event1 and event2. \n\n::: callout-note\nThe steps below can be combined in one code chunk.  However, I purposely separate them so that you can study the output of each step. \n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list <- strsplit(mc2_edges$type, \"\\\\.\")\n```\n:::\n\n\nThe code chunk below will be used to find the maximum number of elements in any split\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmax_elements <- max(lengths(word_list))\n```\n:::\n\n\nThe code chunk below will be used to pad shorter splits with NA values to make them all the same length.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list_padded <- lapply(word_list, \nfunction(x) c(x, rep(NA, max_elements - length(x))))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- do.call(rbind, word_list_padded)\ncolnames(word_df) <- paste0(\"event\", 1:max_elements)\n```\n:::\n\n\nSince the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword_df <- as_tibble(word_df) %>%\n  select(event2, event3)\nclass(word_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n\n\n:::\n:::\n\n\nThe code chunk below appends the extracted columns back to mc2_edges tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_edges <- mc2_edges %>%\n  cbind(word_df)\n```\n:::\n\n\nBefore moving to the next task, it will be wiser to save the tidied *mc2_edges* into a physical file for future used.  By doing so, you also do not have to repeat the steps above.\n\nThe code chunk below will be used to save mc2_edges into R **rds** file format.\n\n::: callout-note\nPlease ensure that there is a sub-folder called *rds* in the *data* folder.  If not, you should create one first.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(mc2_edges, \"data/rds/mc2_edges.rds\")\n```\n:::\n\n\n## Wrangling and tidying nodes\n\n::: callout-warning\nThis section mainly focuses on tidying and wrangling text data in the Activities column.  For other data checking, tidying and wrangling tasks, please refer to the steps discussed above.\n:::\n\n### Extracting nodes\n\nThe code chunk below will be used to extract the *nodes* data.frame of *mc2_data* and parses it as a tibble data.frame called *mc2_nodes*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes <- as_tibble(mc2_data$nodes) %>%\n  distinct()\n```\n:::\n\n\nNext, the code chunk below is used to reveal the data structure of *mc2_nodes* tibble data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mc2_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,637\nColumns: 20\n$ type                 <chr> \"Entity.Commodity.Fish\", \"Entity.Commodity.Fish\",…\n$ `_last_edited_by`    <chr> \"Clepper Jessen\", \"Clepper Jessen\", \"Haenyeo Hyun…\n$ `_date_added`        <chr> \"2033-09-04T00:00:00\", \"2034-01-21T00:00:00\", \"20…\n$ `_last_edited_date`  <chr> \"2035-01-25T00:00:00\", \"2035-01-04T00:00:00\", \"20…\n$ `_raw_source`        <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"Oceanus:…\n$ `_algorithm`         <chr> \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"…\n$ name                 <chr> \"Cod/Gadus n.specificatae\", \"Birdseye/Pisces frig…\n$ id                   <chr> \"gadusnspecificatae4ba\", \"piscesfrigus900\", \"pisc…\n$ Name                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"Haacklee…\n$ Description          <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ Activities           <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n$ kind                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, \"city\", \"…\n$ qty_tons             <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ date                 <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ flag_country         <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ company              <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ tonnage              <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ length_overall       <int> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ style                <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, N…\n$ fish_species_present <list> <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, <NULL>, …\n```\n\n\n:::\n:::\n\n\nFrom the table above, beside the date data type and inappropriate field name issues we discussed earlier, two additional data issues can be observed.  They are:\n\n-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.\n-   As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c(\"\")). \n\n![](images/image3.jpg)\n\n### Tidying text field\n\nIn the code chunk below, `mutate()` of dplyr and `gsub()` of Base R are used to perform the data todying task.  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes_tidied <- mc2_nodes %>%\n  mutate(Activities = gsub(\"c[(]\", \"\", Activities)) %>% \n  mutate(Activities = gsub(\"\\\"\", \"\", Activities)) %>%\n  mutate(Activities = gsub(\"[)]\", \"\", Activities)) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmc2_nodes_tidied <- mc2_nodes_tidied %>%\n  mutate(fish_species_present = gsub(\"c[(]\", \"\", fish_species_present)) %>% \n  mutate(fish_species_present = gsub(\"\\\"\", \"\", fish_species_present)) %>%\n  mutate(fish_species_present = gsub(\"[)]\", \"\", fish_species_present)) \n```\n:::\n\n\nNotice that the text values in Activities column are in tody manner now.\n\n![](images/image4.jpg)\n\n::: callout-note\nBefore moving to the next task, it is a good practice to save the tidied data into a physical file for future use.\n:::\n\n",
    "supporting": [
      "kickstarter2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}