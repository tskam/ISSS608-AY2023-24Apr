---
title: "Kickstarter 2: Working with Graph Data"
format: html
date: "May 24, 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
---

## Overview

This kickstarter aims to provide you hands-on guide on how to work with graph data. By the end of this hands-on exercise, you will be able to use appropriate R functions to perform the following tasks:

-   Importing graph data in json file format into R
-   Extracting the nodes and edges (also known as links) from imported graph data.
-   Wrangling text data type.

## Getting Started

For the purpose of this exercise, three R packages will be used. They are tidyverse, jsonlite and SmartEDA.

::: callout-note
You are required to install the R packages above, if necessary, before continue to the next step.
:::

In the code chunk below, p_load() of pacman package is used to load the R packages into R environemnt.

```{r}
pacman::p_load(tidyverse, jsonlite)
```

## Importing Graph Data

For the purpose of this exercise, *mc2.json* file will be used. Before getting started, you should have the data set in the *data* sub-folder.

::: callout-warning
This is a very large data set. Please ensure that you have added a line `data/` in the *.gitignore* file.
:::

In the code chunk below, fromJSON() of jsonlite package is used to import mc2.json file into R and save the output object

```{r}
mc2_data <- fromJSON("data/mc2.json")
```

The output is called *mc2_data*. It is a large list R object.

## Wrangling and tidying edges

In this section, you will learn how to extract and wrangle the edges object.

### Extracting edges

The code chunk below will be used to extract the *links* data.frame of *mc2_data* and save it as a tibble data.frame called *mc2_edges*.

```{r}
mc2_edges <- as_tibble(mc2_data$links) %>% 
  distinct() 
```

Next, `glimpse()` of dplyr will be used to reveal the structure of *mc2_edges* tibble data.table

```{r}
glimpse(mc2_edges)
```

::: callout-note
From the table above, the following data issues can be identified:

-   Columns with date data type are not in the correct format.
-   some field names start with "\_" need to be rename in order to avoid unnecessary coding issue in the later part of the tasks.
:::

### Correcting date data type

In the code chunk below, `as_datetime()` of **lubridate** package is used to convert fields with character date into **POSIXt** format.

```{r}
mc2_edges$time <- as_datetime(mc2_edges$time)
mc2_edges$"_last_edited_date" <- as_datetime(mc2_edges$"_last_edited_date")
mc2_edges$"_date_added" <- as_datetime(mc2_edges$"_date_added")
mc2_edges$"date" <- as_datetime("mc2_edges$date")
```

Next, glimpse() will be used to confirm if the process have been performed correctly.

```{r}
glimpse(mc2_edges)
```

### Changing field name

In the code chunk below, `rename()` of **dplyr** package is used to change the following fields.

```{r}
mc2_edges <- mc2_edges %>%
  rename("last_edited_by" = "_last_edited_by",
         "date_added" = "_date_added",
         "last_edited_date" = "_last_edited_date",
         "raw_source" = "_raw_source",
         "algorithm" = "_algorithm") 
```

### Splitting words

From the screenshot below, we can see that the text in *type* field are not in a tidy manner.

![](images/image1.jpg)

We are going to tidy the type column by creating two columns as shown below.

![](images/image2.jpg)

The steps below will be used to split text in type column into two columns: namely event1 and event2.

::: callout-note
The steps below can be combined in one code chunk. However, I purposely separate them so that you can study the output of each step.
:::

```{r}
word_list <- strsplit(mc2_edges$type, "\\.")
```

The code chunk below will be used to find the maximum number of elements in any split

```{r}
max_elements <- max(lengths(word_list))
```

The code chunk below will be used to pad shorter splits with NA values to make them all the same length.

```{r}
word_list_padded <- lapply(word_list, 
function(x) c(x, rep(NA, max_elements - length(x))))
```

```{r}
word_df <- do.call(rbind, word_list_padded)
colnames(word_df) <- paste0("event", 1:max_elements)
```

Since the output above is a matrix, the code chunk below is used to convert word_df into a tibble data.frame.

```{r}
word_df <- as_tibble(word_df) %>%
  select(event2, event3)
class(word_df)
```

The code chunk below appends the extracted columns back to mc2_edges tibble data.frame.

```{r}
mc2_edges <- mc2_edges %>%
  cbind(word_df)
```

Before moving to the next task, it will be wiser to save the tidied *mc2_edges* into a physical file for future used. By doing so, you also do not have to repeat the steps above.

The code chunk below will be used to save mc2_edges into R **rds** file format.

::: callout-note
Please ensure that there is a sub-folder called *rds* in the *data* folder. If not, you should create one first.
:::

```{r}
write_rds(mc2_edges, "data/rds/mc2_edges.rds")
```

## Wrangling and tidying nodes

::: callout-warning
This section mainly focuses on tidying and wrangling text data in the Activities column. For other data checking, tidying and wrangling tasks, please refer to the steps discussed above.
:::

### Extracting nodes

The code chunk below will be used to extract the *nodes* data.frame of *mc2_data* and parses it as a tibble data.frame called *mc2_nodes*.

```{r}
mc2_nodes <- as_tibble(mc2_data$nodes) %>%
  distinct()
```

Next, the code chunk below is used to reveal the data structure of *mc2_nodes* tibble data.frame.

```{r}
glimpse(mc2_nodes)
```

From the table above, beside the date data type and inappropriate field name issues we discussed earlier, two additional data issues can be observed. They are:

-   The values in Activities and fish_species_present fields are in **list** data type, which will affect the ability to process and to analyse the data.
-   As shown in the screenshot below, some values in the Activities field are not ready to be analyse without further tidying (i.e. removing c("")).

![](images/image3.jpg)

### Tidying text field

In the code chunk below, `mutate()` of dplyr and `gsub()` of Base R are used to perform the data todying task.

```{r}
mc2_nodes_tidied <- mc2_nodes %>%
  mutate(Activities = gsub("c[(]", "", Activities)) %>% 
  mutate(Activities = gsub("\"", "", Activities)) %>%
  mutate(Activities = gsub("[)]", "", Activities)) 
```

```{r}
mc2_nodes_tidied <- mc2_nodes_tidied %>%
  mutate(fish_species_present = gsub("c[(]", "", fish_species_present)) %>% 
  mutate(fish_species_present = gsub("\"", "", fish_species_present)) %>%
  mutate(fish_species_present = gsub("[)]", "", fish_species_present)) 
```

Notice that the text values in Activities column are in tody manner now.

![](images/image4.jpg)

::: callout-note
Before moving to the next task, it is a good practice to save the tidied data into a physical file for future use.
:::
